name: Compression

on:
  push:
    branches:
      - 'main'

jobs:
  Update-Compression-Files:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo content
        uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install -r requirements.txt
      - run: pip install financedatabase
      - run: pip install pyarrow
      - run : pip install openpyxl
      - name: Update Compressions
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import financedatabase as fd
            import pandas as pd

            cryptos = pd.read_csv('Database/cryptos.csv')
            cryptos.to_parquet('compression/cryptos.brotli', compression='brotli')

            currencies = pd.read_csv('Database/currencies.csv')
            currencies.to_parquet('compression/currencies.brotli', compression='brotli')

            equities = pd.read_csv('Database/equities.csv')
            equities.to_parquet('compression/equities.brotli', compression='brotli')

            etfs = pd.read_csv('Database/etfs.csv')
            etfs.to_parquet('compression/etfs.brotli', compression='brotli')

            funds = pd.read_csv('Database/funds.csv')
            funds.to_parquet('compression/funds.brotli', compression='brotli')

            indices = pd.read_csv('Database/indices.csv')
            indices.to_parquet('compression/indices.brotli', compression='brotli')

            moneymarkets = pd.read_csv('Database/moneymarkets.csv')
            moneymarkets.to_parquet('compression/moneymarkets.brotli', compression='brotli')
      - name: Commit files and log
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add -A
          git checkout main
          git diff-index --quiet HEAD || git commit -am "Update Compression Files"
          git push
      - name: Check run status
        if: steps.run.outputs.status != '0'
        run: exit "${{ steps.run.outputs.status }}"



